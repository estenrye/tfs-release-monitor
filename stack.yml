version: "3.7"
networks:
  dmz:
    name: public
  internal:
    name: private
  monitor-net:
    name: monitor
volumes:
  prometheus_data: {}
  grafana_data: {}
  traefik_data: {}

services:
  traefik:
    image: traefik:2.2
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: volume
        source: traefik_data
        target: /opt/data
    ports:
      - target: 443
        published: 443
        protocol: tcp
        mode: ingress
      - target: 80
        published: 80
        protocol: tcp
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 20s
      update_config:
        failure_action: rollback
        monitor: 30s
        order: start-first
      labels:
        traefik.http.routers.api.rule: Host(`traefik.${TOP_LEVEL_DOMAIN:-localhost}`)
        traefik.http.routers.api.service: api@internal
        traefik.http.routers.api.middlewares: auth
        traefik.http.routers.api.entrypoints: ${TRAEFIK_WEB_ENTRYPOINT:-web},traefik
        traefik.http.routers.ping.rule: host(`traefik.${TOP_LEVEL_DOMAIN:-localhost}`) && PathPrefix(`/ping`)
        traefik.http.routers.ping.service: ping@internal
        traefik.http.routers.ping.middlewares: auth
        traefik.http.routers.ping.entrypoints: ${TRAEFIK_WEB_ENTRYPOINT:-web},traefik
        traefik.http.middlewares.auth.basicauth.usersfile: /run/secrets/usersfile
        # Dummy service for Swarm port detection. The port can be any valid integer value.
        traefik.http.services.dummy-svc.loadbalancer.server.port: 9999
    networks:
      - dmz
    secrets:
      - source: traefik_usersfile
        target: usersfile

  jaeger:
    image: jaegertracing/all-in-one:1.17.1
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    deploy:
      labels:
        applicationPrefix: jaeger
        traefik.http.middlewares.auth.basicauth.usersfile: /run/secrets/usersfile
        traefik.http.routers.jaeger.middlewares: auth
        traefik.http.routers.jaeger.entrypoints: ${TRAEFIK_WEB_ENTRYPOINT:-web}
        traefik.http.services.jaeger.loadbalancer.server.port: 16686
    networks:
      - dmz

  redis:
    image: redis:6.0-rc3
    deploy:
      labels:
        applicationPrefix: redis
        traefik.http.middlewares.auth.basicauth.usersfile: /run/secrets/usersfile
        traefik.http.routers.redis.middlewares: auth
        traefik.http.routers.redis.entrypoints: ${TRAEFIK_WEB_ENTRYPOINT:-web}
        traefik.http.services.redis.loadbalancer.server.port: 6379
    networks:
      - dmz

  prometheus:
    image: prom/prometheus
    volumes:
      - type: volume
        source: prometheus_data
        target: /prometheus
      - type: bind
        source: ${PWD}/prometheus
        target: /etc/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    ports:
      - 9090:9090
    depends_on:
      - cadvisor
    networks:
      - monitor-net
      - dmz
    deploy:
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
      labels:
        applicationPrefix: prometheus
        traefik.http.middlewares.auth.basicauth.usersfile: /run/secrets/usersfile
        traefik.http.routers.prometheus.middlewares: auth
        traefik.http.routers.prometheus.entrypoints: ${TRAEFIK_WEB_ENTRYPOINT:-web}
        traefik.http.services.prometheus.loadbalancer.server.port: 9090

  node-exporter:
    image: prom/node-exporter
    volumes:
      - type: bind
        source: /proc
        target: /host/proc
        read_only: true
      - type: bind
        source: /sys
        target: /host/sys
        read_only: true
      - type: bind
        source: /
        target: /rootfs
        read_only: true
    command: 
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - monitor-net
    deploy:
      mode: global
      restart_policy:
          condition: on-failure

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - type: bind
        source: ${PWD}/alertmanager
        target: /etc/alertmanager
    networks:
      - monitor-net
    command:
      - --config.file=/etc/alertmanager/config.yml
      - --storage.path=/alertmanager
    deploy:
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure    

  cadvisor:
    image: google/cadvisor
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /var/run
        target: /var/run
      - type: bind
        source: /sys
        target: /sys
        read_only: true
      - type: bind
        source: /var/lib/docker
        target: /var/lib/docker
        read_only: true
    ports:
      - 8080:8080
    networks:
      - monitor-net
    deploy:
      mode: global
      restart_policy:
          condition: on-failure

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - type: volume
        source: grafana_data
        target: /var/lib/grafana
      - type: bind
        source: ${PWD}/grafana/provisioning
        target: /etc/grafana/provisioning
    environment:
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/admin_password
    secrets:
      - source: grafana_admin_password
        target: admin_password
    networks:
      - monitor-net
      - dmz
    user: "104"
    deploy:
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
      labels:
        applicationPrefix: grafana
        traefik.http.routers.grafana.entrypoints: ${TRAEFIK_WEB_ENTRYPOINT:-web}
        traefik.http.services.grafana.loadbalancer.server.port: 3000
secrets:
  traefik_usersfile:
    external: true
  grafana_admin_password:
    external: true
