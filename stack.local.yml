version: "3.7"
networks:
  dmz:
    name: public
  internal:
    name: private
  monitor-net:
    name: monitor
volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  traefik:
    image: traefik:2.2
    command:
      - --accesslog
      - --accesslog.format=json
      - --api
      - --api.dashboard
      - --api.debug=false
      - --entryPoints.web.address=:80
      - --log
      - --log.format=json
      - --log.level=info
      - --ping
      - --ping.entrypoint=traefik
      - --providers.docker=true
      - --providers.docker.defaultRule=Host(`{{ index .Labels "applicationPrefix" }}.local`)
      - --providers.docker.exposedbydefault=true
      - --providers.docker.network=public
      - --providers.docker.swarmMode=true
      - --providers.docker.swarmModeRefreshSeconds=${SWARM_REFRESH_SECONDS:-30}
      - --providers.docker.watch=true
      - --tracing=true
      - --tracing.serviceName=traefik
      - --tracing.jaeger.collector.endpoint=http://jaeger:14268/api/traces?format=jaeger.thrift
      - --entryPoints.metrics.address=:8082
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addServicesLabels=true
      - --metrics.prometheus.entryPoint=metrics
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    ports:
      - target: 443
        published: 443
        protocol: tcp
        mode: ingress
      - target: 80
        published: 80
        protocol: tcp
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 20s
      update_config:
        failure_action: rollback
        monitor: 30s
        order: start-first
      labels:
        traefik.http.routers.api.rule: Host(`localhost`)
        traefik.http.routers.api.service: api@internal
        traefik.http.routers.api.middlewares: auth
        traefik.http.routers.api.entrypoints: web,traefik
        traefik.http.routers.ping.rule: host(`localhost`) && PathPrefix(`/ping`)
        traefik.http.routers.ping.service: ping@internal
        traefik.http.routers.ping.middlewares: auth
        traefik.http.routers.ping.entrypoints: web,traefik
        traefik.http.middlewares.auth.basicauth.usersfile: /run/secrets/usersfile
        # Dummy service for Swarm port detection. The port can be any valid integer value.
        traefik.http.services.dummy-svc.loadbalancer.server.port: 9999
    networks:
      - dmz
    secrets:
      - source: traefik_usersfile
        target: usersfile

  jaeger:
    image: jaegertracing/all-in-one:1.17.1
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    deploy:
      labels:
        applicationPrefix: jaeger
        traefik.http.middlewares.auth.basicauth.usersfile: /run/secrets/usersfile
        traefik.http.routers.jaeger.middlewares: auth
        traefik.http.routers.jaeger.entrypoints: web
        traefik.http.services.jaeger.loadbalancer.server.port: 16686
    networks:
      - dmz

  redis:
    image: redis:6.0-rc3
    deploy:
      labels:
        applicationPrefix: redis
        traefik.http.middlewares.auth.basicauth.usersfile: /run/secrets/usersfile
        traefik.http.routers.redis.middlewares: auth
        traefik.http.routers.redis.entrypoints: web
        traefik.http.services.redis.loadbalancer.server.port: 6379
    networks:
      - dmz

  prometheus:
    image: prom/prometheus
    volumes:
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_alerts
        target: /etc/prometheus/alerts.rules
    ports:
      - 9090:9090
    depends_on:
      - cadvisor
    networks:
      - monitor-net
      - dmz
    deploy:
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
      labels:
        applicationPrefix: prometheus
        traefik.http.middlewares.auth.basicauth.usersfile: /run/secrets/usersfile
        traefik.http.routers.prometheus.middlewares: auth
        traefik.http.routers.prometheus.entrypoints: web
        traefik.http.services.prometheus.loadbalancer.server.port: 9090

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - monitor-net
    deploy:
      mode: global
      restart_policy:
          condition: on-failure

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager/config.yml
    networks:
      - monitor-net
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    deploy:
      placement:
        constraints:
           - node.role==manager
      restart_policy:
        condition: on-failure    

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - monitor-net
    deploy:
      mode: global
      restart_policy:
          condition: on-failure

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - ./grafana/config.monitoring
    configs:
      - source: grafana_datasource
        target: /etc/grafana/provisioning/datasources/datasource.yml
      - source: grafana_dashboard
        target: /etc/grafana/provisioning/dashboards/dashboard.yml
      - source: grafana_docker_prometheus
        target: /etc/grafana/provisioning/dashboards/Docker_Prometheus_Monitoring-1571332751387.json
    networks:
      - monitor-net
      - dmz
    user: "104"
    deploy:
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
      labels:
        applicationPrefix: grafana
        traefik.http.routers.grafana.entrypoints: web
        traefik.http.services.grafana.loadbalancer.server.port: 3000
secrets:
  traefik_usersfile:
    external: true

configs:
  alertmanager_config:
    file: ./alertmanager/config.yml
  grafana_datasource:
    file: ./grafana/provisioning/datasources/datasource.yml
  grafana_dashboard:
    file: ./grafana/provisioning/dashboards/dashboard.yml
  grafana_docker_prometheus:
    file: ./grafana/provisioning/dashboards/Docker_Prometheus_Monitoring-1571332751387.json
  prometheus_alerts:
    file: ./prometheus/alert.rules
  prometheus_config:
    file: ./prometheus/prometheus.yml